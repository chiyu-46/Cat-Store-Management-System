@using Microsoft.EntityFrameworkCore
@using CatStore.Models
@using CatStore.Data
@implements IAsyncDisposable
@inject IDbContextFactory<CatStoreContext> DbFactory
@inject ISnackbar Snackbar

<EditForm Model="@catBreed" OnValidSubmit="AddCatBreed" FormName="create-cat-breed" Enhance>
    <DataAnnotationsValidator/>
    <MudDialog>
        <TitleContent>
            <MudText>
                <MudIcon Icon="@Icons.Material.Outlined.Add" Class="mr-3 mb-n1"/>
                添加品种
            </MudText>
        </TitleContent>
        <DialogContent>
            <MudTextField Label="品种名" HelperText="最少一个字" Required="true" RequiredError="必须输入品种名！"
                          @bind-Value="catBreed.BreedName" For="@(() => catBreed.BreedName)"/>
            <MudTextField Label="备注" 
                          @bind-Value="catBreed.Remark" For="@(() => catBreed.Remark)"/>
        </DialogContent>
        <DialogActions>
            <MudButton OnClick="Cancel">取消</MudButton>
            <MudButton ButtonType="ButtonType.Submit" Color="Color.Success">添加</MudButton>
        </DialogActions>
    </MudDialog>
</EditForm>

@code {
    [CascadingParameter] private IMudDialogInstance MudDialog { get; set; } = default!;

    private CatStoreContext dbContext = default!;

    // 代表表单中的数据
    private CatBreed catBreed = new CatBreed();

    protected override void OnInitialized()
    {
        dbContext = DbFactory.CreateDbContext();
    }

    public async ValueTask DisposeAsync() => await dbContext.DisposeAsync();


    private void Cancel() => MudDialog.Cancel();

    /// <summary>
    /// 添加品种到数据库，显示结果信息，并关闭本对话框。
    /// </summary>
    private async Task AddCatBreed()
    {
        dbContext.CatBreed.Add(catBreed);
        await dbContext.SaveChangesAsync();
        Snackbar.Add("品种添加成功！", Severity.Success);
        MudDialog.Close(DialogResult.Ok(true));
    }

}