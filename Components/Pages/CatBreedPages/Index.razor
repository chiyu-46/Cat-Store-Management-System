@page "/cat-breeds"
@attribute [Authorize]
@using Microsoft.AspNetCore.Authorization
@using Microsoft.EntityFrameworkCore
@using CatStore.Models
@using CatStore.Data
@implements IAsyncDisposable
@inject IDbContextFactory<CatStoreContext> DbFactory
@inject IDialogService DialogService
@inject ISnackbar Snackbar

<PageTitle>品种管理</PageTitle>

<MudDataGrid T="CatBreed" Items="dbContext.CatBreed" ReadOnly="readOnly"
             EditMode="DataGridEditMode.Form"
             EditTrigger="DataGridEditTrigger.Manual" StartedEditingItem="StartedEditingItem"
             CanceledEditingItem="CanceledEditingItem" CommittedItemChanges="CommittedItemChangesAsync"
             Striped="true" Elevation="5" Class="ma-4 pa-4">
    <ToolBarContent>
        <MudText Typo="Typo.h6">品种管理</MudText>
        <MudSpacer/>
        <MudButton @onclick="AddCatBreedAsync" Variant="Variant.Filled" Color="Color.Success">添加品种</MudButton>
    </ToolBarContent>
    <Columns>
        <PropertyColumn Property="o =>o.BreedName" Title="品种名称"/>
        <PropertyColumn Property="o => o.Remark" Title="备注" />
        
        <TemplateColumn>
            <CellTemplate>
                <MudStack Row>
                    <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Edit" Disabled="readOnly"
                                   OnClick="@context.Actions.StartEditingItemAsync"/>
                    <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.DeleteForever" Disabled="readOnly"
                                   OnClick="@(() => OnDeleteButtonClickedAsync(context.Item))"/>
                </MudStack>
            </CellTemplate>
        </TemplateColumn>
    </Columns>
    <PagerContent>
        <MudDataGridPager T="CatBreed" PageSizeOptions="@(new[] { 5, 10, 20 })"/>
    </PagerContent>
</MudDataGrid>

@code {
    [CascadingParameter] private Task<AuthenticationState>? authenticationState { get; set; }

    private CatStoreContext dbContext = default!;

    // 此表格是否只读。
    // 可用于根据授权确定用户是否有权限更改此表格内容。
    // 可以使用 Editable 属性，控制单独的列是否可编辑。
    private bool readOnly = false;
    // 记录用户修改品种时的原始副本
    private CatBreed? tempCatBreed;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        dbContext = await DbFactory.CreateDbContextAsync();
        if (authenticationState is not null)
        {
            var authState = await authenticationState;
            var user = authState?.User;

            if (user is not null)
            {
                if (user.IsInRole("salesman"))
                {
                    readOnly = true;
                }
            }
        }
    }

    public async ValueTask DisposeAsync() => await dbContext.DisposeAsync();

    /// <summary>
    /// 用户开始对表格中某条信息的编辑时，触发此事件。
    /// </summary>
    /// <param name="item">正在被用户编辑的这条信息。</param>
    private void StartedEditingItem(CatBreed item)
    {
        tempCatBreed = item;
    }

    /// <summary>
    /// 用户取消对表格中某条信息的编辑时，触发此事件。
    /// </summary>
    /// <param name="item">正在被用户编辑的这条信息。</param>
    private void CanceledEditingItem(CatBreed item)
    {
        tempCatBreed = null;
    }

    /// <summary>
    /// 用户提交对表格中某条信息的编辑时，触发此事件。
    /// </summary>
    /// <param name="item">正在被用户编辑的这条信息。</param>
    private async Task CommittedItemChangesAsync(CatBreed item)
    {
        // 若修改品种名，则检查是否存在同名记录，有则取消更新
        if (tempCatBreed!.BreedName != item.BreedName 
            && await dbContext.CatBreed.AnyAsync(o => o.BreedName == item.BreedName))
        {
            Snackbar.Add("猫咪品种不可重复！", Severity.Error);
            dbContext.ChangeTracker.Clear();
            StateHasChanged();
            return;
        }
        try
        {
            await dbContext.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            Snackbar.Add("要修改的原信息不存在！", Severity.Error);
            StateHasChanged();
        }
    }

    /// <summary>
    /// 当用户点击删除按钮时触发，用于弹出删除确认对话框。
    /// </summary>
    /// <param name="item">要删除的一条数据。</param>
    private async Task OnDeleteButtonClickedAsync(CatBreed? item)
    {
        // 检查品种下是否存在猫咪，存在则不允许删除
        int catCount = dbContext.CatBreed.Where(o => o.Id == item.Id)
            .Include(o => o.Cats)
            .First().Cats.Count;
        if (catCount > 0)
        {
            Snackbar.Add("当前品种已有猫咪存在，禁止删除！", Severity.Error);
            return;
        }
        bool? result = await DialogService.ShowMessageBox(
            "警告",
            "删除后无法恢复！",
            yesText: "删除！", cancelText: "取消");
        if (result is true)
        {
            if (item != null)
            {
                dbContext.CatBreed.Remove(item);
                try
                {
                    await dbContext.SaveChangesAsync();
                }
                catch (DbUpdateConcurrencyException)
                {
                    Snackbar.Add("原信息不存在！", Severity.Error);
                }
                finally
                {
                    StateHasChanged();
                }
            }
            else
            {
                Snackbar.Add("原信息不存在！", Severity.Error);
            }
        }
    }

    /// <summary>
    /// 显示添加品种对话框。
    /// </summary>
    private async Task AddCatBreedAsync()
    {
        var dialog = await DialogService.ShowAsync<CreateCatBreed>("添加品种");
        var result = await dialog.Result;

        if (!result!.Canceled)
        {
            StateHasChanged();
        }
    }

}
