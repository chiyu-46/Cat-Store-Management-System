@page "/appointments"
@attribute [Authorize]
@using Microsoft.AspNetCore.Authorization
@using Microsoft.EntityFrameworkCore
@using CatStore.Models
@using CatStore.Data
@implements IAsyncDisposable
@inject IDbContextFactory<CatStoreContext> DbFactory
@inject IDialogService DialogService
@inject ISnackbar Snackbar

<PageTitle>预约管理</PageTitle>

<MudDataGrid @ref="dataGrid" T="Appointment" ServerData="GetAppointmentsAsync"
             ReadOnly="true" EditMode="DataGridEditMode.Form"
             EditTrigger="DataGridEditTrigger.Manual"
             Striped="true" Elevation="5" Class="ma-4 pa-4">
    <ToolBarContent>
        <MudText Typo="Typo.h6">预约管理</MudText>
        <MudSpacer/>
        <MudStack Row="true" Spacing="3">
            <MudButton @onclick="AddAppointmentAsync" Variant="Variant.Filled" Color="Color.Success">添加预约</MudButton>
            <MudButton @onclick="DeleteOutOfDateAppointmentAsync" Variant="Variant.Filled" Color="Color.Error">清理过期预约</MudButton>
        </MudStack>
    </ToolBarContent>
    <Columns>
        <PropertyColumn Property="o => o.CustomerName" Title="顾客称呼"/>
        <PropertyColumn Property="o => o.ArrivalDateTime" Title="到达时间"/>
        <PropertyColumn Property="o => o.Remark" Title="备注"/>
        <TemplateColumn>
            <CellTemplate>
                <MudStack Row>
                    <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Edit"
                                   OnClick="@(() => UpdateAppointmentAsync(context.Item!.Id))"/>
                    <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.DeleteForever"
                                   OnClick="@(() => OnDeleteButtonClickedAsync(context.Item))"/>
                </MudStack>
            </CellTemplate>
        </TemplateColumn>
    </Columns>
    <PagerContent>
        <MudDataGridPager T="Appointment" PageSizeOptions="@(new[] { 5, 10, 20 })"/>
    </PagerContent>
</MudDataGrid>

@code {
    private MudDataGrid<Appointment> dataGrid = default!;

    private CatStoreContext dbContext = default!;

    protected override void OnInitialized()
    {
        dbContext = DbFactory.CreateDbContext();
    }

    public async ValueTask DisposeAsync() => await dbContext.DisposeAsync();

    /// <summary>
    /// 页面中数据网格的数据源，用于获取预约数据。
    /// </summary>
    /// <param name="state">用于获取分页、排序信息。</param>
    /// <returns>向数据网格提供数据。</returns>
    private async Task<GridData<Appointment>> GetAppointmentsAsync(GridState<Appointment> state)
    {
        IQueryable<Appointment> query = dbContext.Appointment;

        var sortDefinition = state.SortDefinitions.FirstOrDefault();
        if (sortDefinition != null)
        {
            query = sortDefinition.SortBy switch
            {
                nameof(Appointment.CustomerName) => sortDefinition.Descending ? query.OrderByDescending(o => o.CustomerName) : query.OrderBy(o => o.CustomerName),
                nameof(Appointment.ArrivalDateTime) => sortDefinition.Descending ? query.OrderByDescending(o => o.ArrivalDateTime) : query.OrderBy(o => o.ArrivalDateTime),
                nameof(Appointment.Remark) => sortDefinition.Descending ? query.OrderByDescending(o => o.Remark) : query.OrderBy(o => o.Remark),
                _ => query.OrderByDescending(o => o.Id)
            };
        }

        int totalItems = await query.CountAsync();
        var pagedData = await query.Skip(state.Page * state.PageSize).Take(state.PageSize).ToArrayAsync();

        return new GridData<Appointment>
        {
            TotalItems = totalItems,
            Items = pagedData
        };
    }

    /// <summary>
    /// 当用户点击删除按钮时触发，用于弹出删除确认对话框。
    /// </summary>
    /// <param name="item">要删除的一条数据。</param>
    private async Task OnDeleteButtonClickedAsync(Appointment? item)
    {
        bool? result = await DialogService.ShowMessageBox(
            "警告",
            "删除后无法恢复！",
            yesText: "删除！", cancelText: "取消");
        if (result is true)
        {
            if (item != null)
            {
                dbContext.Appointment.Remove(item);
                try
                {
                    await dbContext.SaveChangesAsync();
                }
                catch (DbUpdateConcurrencyException)
                {
                    Snackbar.Add("原信息不存在！", Severity.Error);
                }
                finally
                {
                    await dataGrid.ReloadServerData();
                }
            }
            else
            {
                Snackbar.Add("原信息不存在！", Severity.Error);
            }
        }
    }

    /// <summary>
    /// 清理过期预约。
    /// </summary>
    private async Task DeleteOutOfDateAppointmentAsync()
    {
        var items = await (from appointment in dbContext.Appointment
            where appointment.ArrivalDateTime < DateTime.Now
            select appointment).ToArrayAsync();
        dbContext.Appointment.RemoveRange(items);
        await dbContext.SaveChangesAsync();
        await dataGrid.ReloadServerData();
    }
    
    /// <summary>
    /// 显示添加预约对话框。
    /// </summary>
    private async Task AddAppointmentAsync()
    {
        var parameters = new DialogParameters<CreateOrEditAnAppointment>
        {
            { x => x.dbContext, dbContext },
            { x => x.IsCreate, true }
        };
        var dialog = await DialogService.ShowAsync<CreateOrEditAnAppointment>("添加预约", parameters);
        var result = await dialog.Result;

        if (!result!.Canceled)
        {
            await dataGrid.ReloadServerData();
        }
        else
        {
            dbContext.ChangeTracker.Clear();
        }
    }

    /// <summary>
    /// 显示修改预约对话框。
    /// </summary>
    private async Task UpdateAppointmentAsync(int appointmentId)
    {
        var parameters = new DialogParameters<CreateOrEditAnAppointment>
        {
            { x => x.dbContext, dbContext },
            { x => x.IsCreate, false },
            { x => x.AppointmentId, appointmentId },
        };
        var dialog = await DialogService.ShowAsync<CreateOrEditAnAppointment>("修改预约", parameters);
        var result = await dialog.Result;

        if (!result!.Canceled)
        {
            await dataGrid.ReloadServerData();
        }
        else
        {
            dbContext.ChangeTracker.Clear();
        }
    }

}
