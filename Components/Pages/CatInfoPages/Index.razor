@page "/cat-infos"
@attribute [Authorize]
@using Microsoft.AspNetCore.Authorization
@using Microsoft.EntityFrameworkCore
@using CatStore.Models
@using CatStore.Data
@implements IAsyncDisposable
@inject IDbContextFactory<CatStoreContext> DbFactory
@inject IDialogService DialogService
@inject ISnackbar Snackbar

<PageTitle>猫咪管理</PageTitle>

<MudDataGrid @ref="dataGrid" T="CatInfo" ServerData="GetCatInfosAsync" ReadOnly="true"
             Striped="true" Elevation="5" Class="ma-4 pa-4">
    <ToolBarContent>
        <MudText Typo="Typo.h6">猫咪管理</MudText>
        <MudSpacer/>
        @if (!readOnly)
        {
            <MudButton @onclick="AddCatInfoAsync" Variant="Variant.Filled" Color="Color.Success">添加新猫咪</MudButton>
        }
    </ToolBarContent>
    <Columns>
        <PropertyColumn Property="catInfo => catInfo.Name" Title="名字"/>
        <PropertyColumn Property="catInfo => catInfo.GetNaturalGender()" Title="性别"/>
        <PropertyColumn Property="catInfo => catInfo.CatBreed.BreedName" Title="品种"/>
        <PropertyColumn Property="catInfo => catInfo.Birthday" Title="出生日"/>
        <PropertyColumn Property="catInfo => catInfo.GetNaturalCatState()" Title="状态"/>
        <TemplateColumn>
            <CellTemplate>
                <MudStack Row>
                    <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Edit" Disabled="readOnly"
                                   OnClick="@(() => UpdateCatInfoAsync(context.Item!.Id))"/>
                    <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.DeleteForever" Disabled="readOnly"
                                   OnClick="@(() => OnDeleteButtonClickedAsync(context.Item))"/>
                </MudStack>
            </CellTemplate>
        </TemplateColumn>
    </Columns>
    <PagerContent>
        <MudDataGridPager T="CatInfo" PageSizeOptions="@(new[] { 5, 10, 20 })"/>
    </PagerContent>
</MudDataGrid>

@code {
    private MudDataGrid<CatInfo> dataGrid = default!;

    [CascadingParameter] private Task<AuthenticationState>? authenticationState { get; set; }

    private CatStoreContext dbContext = default!;

    // 此表格是否只读。
    // 可用于根据授权确定用户是否有权限更改此表格内容。
    // 可以使用 Editable 属性，控制单独的列是否可编辑。
    private bool readOnly = false;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        dbContext = await DbFactory.CreateDbContextAsync();
        if (authenticationState is not null)
        {
            var authState = await authenticationState;
            var user = authState?.User;

            if (user is not null)
            {
                if (user.IsInRole("salesman"))
                {
                    readOnly = true;
                }
            }
        }
    }

    public async ValueTask DisposeAsync() => await dbContext.DisposeAsync();

    /// <summary>
    /// 页面中数据网格的数据源，用于获取预约数据。
    /// </summary>
    /// <param name="state">用于获取分页、排序信息。</param>
    /// <returns>向数据网格提供数据。</returns>
    private async Task<GridData<CatInfo>> GetCatInfosAsync(GridState<CatInfo> state)
    {
        IQueryable<CatInfo> query = dbContext.CatInfo;

        var sortDefinition = state.SortDefinitions.FirstOrDefault();
        if (sortDefinition != null)
        {
            query = sortDefinition.SortBy switch
            {
                nameof(CatInfo.Name) => sortDefinition.Descending ? query.OrderByDescending(o => o.Name) : query.OrderBy(o => o.Name),
                nameof(CatInfo.Birthday) => sortDefinition.Descending ? query.OrderByDescending(o => o.Birthday) : query.OrderBy(o => o.Birthday),
                nameof(CatInfo.CatBreedId) => sortDefinition.Descending ? query.OrderByDescending(o => o.CatBreedId) : query.OrderBy(o => o.CatBreedId),
                nameof(CatInfo.Gender) => sortDefinition.Descending ? query.OrderByDescending(o => o.Gender) : query.OrderBy(o => o.Gender),
                nameof(CatInfo.CatState) => sortDefinition.Descending ? query.OrderByDescending(o => o.CatState) : query.OrderBy(o => o.CatState),
                _ => query.OrderByDescending(o => o.Id)
            };
        }

        int totalItems = await query.CountAsync();
        var pagedData = await query.Skip(state.Page * state.PageSize).Take(state.PageSize)
            .Include(o => o.CatBreed)
            .ToArrayAsync();

        return new GridData<CatInfo>
        {
            TotalItems = totalItems,
            Items = pagedData
        };
    }

    /// <summary>
    /// 当用户点击删除按钮时触发，用于弹出删除确认对话框。
    /// </summary>
    /// <param name="item">要删除的一条数据。</param>
    private async Task OnDeleteButtonClickedAsync(CatInfo? item)
    {
        string msg = item!.CatState == CatState.Sold ? "删除此项将导致与其关联的猫咪订单被同时删除，请确认是否执行！" : "删除后无法恢复！";
        bool? result = await DialogService.ShowMessageBox(
            "警告",
            msg,
            yesText: "删除！", cancelText: "取消");
        if (result is true)
        {
            if (item != null)
            {
                dbContext.CatInfo.Remove(item);
                try
                {
                    await dbContext.SaveChangesAsync();
                }
                catch (DbUpdateConcurrencyException)
                {
                    Snackbar.Add("原信息不存在！", Severity.Error);
                }
                finally
                {
                    Snackbar.Add("删除成功！", Severity.Success);
                    await dataGrid.ReloadServerData();
                }
            }
            else
            {
                Snackbar.Add("原信息不存在！", Severity.Error);
            }
        }
    }

    /// <summary>
    /// 显示添加猫咪对话框。
    /// </summary>
    private async Task AddCatInfoAsync()
    {
        var parameters = new DialogParameters<CreateOrEditACatInfo>
        {
            { x => x.dbContext, dbContext },
            { x => x.IsCreate, true }
        };
        var dialog = await DialogService.ShowAsync<CreateOrEditACatInfo>("添加新猫咪", parameters);
        var result = await dialog.Result;

        if (!result!.Canceled)
        {
            await dataGrid.ReloadServerData();
        }
        else
        {
            dbContext.ChangeTracker.Clear();
        }
    }

    /// <summary>
    /// 显示修改猫咪对话框。
    /// </summary>
    private async Task UpdateCatInfoAsync(int catInfoId)
    {
        var parameters = new DialogParameters<CreateOrEditACatInfo>
        {
            { x => x.dbContext, dbContext },
            { x => x.IsCreate, false },
            { x => x.CatInfoId, catInfoId },
        };
        var dialog = await DialogService.ShowAsync<CreateOrEditACatInfo>("修改猫咪信息", parameters);
        var result = await dialog.Result;

        if (!result!.Canceled)
        {
            await dataGrid.ReloadServerData();
        }
        else
        {
            dbContext.ChangeTracker.Clear();
        }
    }

}
