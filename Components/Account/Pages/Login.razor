@page "/Account/Login"
@attribute [ExcludeFromInteractiveRouting]
@using System.ComponentModel.DataAnnotations
@using CatStore.Components.Layout
@using CatStore.Data
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using MudBlazor.StaticInput
@layout LoginLayout
@inject SignInManager<ApplicationUser> SignInManager
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager

<PageTitle>宠物店管理系统 - 登录</PageTitle>

<MudContainer MaxWidth="MaxWidth.Small" Class="mt-16">
    <MudPaper Elevation="10" Class="pa-8">
        <MudText Typo="Typo.h4" Class="text-center mb-6">欢迎登录</MudText>

        <EditForm Model="_loginModel" method="post" OnValidSubmit="LoginUserAsync" FormName="login">
            <DataAnnotationsValidator/>
            <MudStaticTextField Label="用户名"
                                @bind-Value="_loginModel.Username"
                                For="() => _loginModel.Username"
                                Required="true"
                                RequiredError="请输入用户名"
                                Variant="Variant.Outlined"
                                Class="mb-4"
                                autocomplete="username"/>

            <MudStaticTextField Label="密码"
                                @bind-Value="_loginModel.Password"
                                For="() => _loginModel.Password"
                                Required="true"
                                RequiredError="请输入密码"
                                Variant="Variant.Outlined"
                                InputType="InputType.Password"
                                Class="mb-4"
                                autocomplete="current-password"
                                Adornment="Adornment.End"
                                AdornmentIcon="@Icons.Material.Outlined.Visibility"
                                AdornmentToggledIcon="@Icons.Material.Outlined.VisibilityOff"
                                AdornmentClickFunction="showPassword"/>

            <MudStaticCheckBox Label="记住我"
                               @bind-Value="_loginModel.RememberMe"
                               For="() => _loginModel.RememberMe"
                               Class="mb-4"/>

            <MudStaticButton Variant="Variant.Filled"
                             Color="Color.Primary"
                             FullWidth="true"
                             Class="mt-4"
                             FormAction="FormAction.Submit">
                登录
            </MudStaticButton>
        </EditForm>
    </MudPaper>
</MudContainer>

<script>
    let timeoutId;

    function showPassword(inputElement, button) {
        if (inputElement.type === 'password') {
            inputElement.type = 'text';
            clearTimeout(timeoutId);
            timeoutId = setTimeout(function () {
                inputElement.type = 'password';
            }, 5000);
        } else {
            inputElement.type = 'password';
            clearTimeout(timeoutId);
        }
    }
</script>

@code {
    [CascadingParameter] private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm] private LoginModel _loginModel { get; set; } = new();

    [SupplyParameterFromQuery] private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            // 清除现有的外部 cookie，确保登录过程干净利落
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    private class LoginModel
    {
        [Required]
        public string Username { get; set; } = string.Empty;
        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = string.Empty;
        public bool RememberMe { get; set; } = false;
    }

    private async Task LoginUserAsync()
    {
        var result = await SignInManager.PasswordSignInAsync(_loginModel.Username, _loginModel.Password, _loginModel.RememberMe, false);
        if (result.Succeeded)
        {
            Snackbar.Add("登录成功！", Severity.Success);
            NavigationManager.NavigateTo("/");
        }
        else if (result.IsLockedOut)
        {
            Snackbar.Add("账号被锁定！", Severity.Error);
        }
        else
        {
            Snackbar.Add("登录失败！", Severity.Error);
        }
    }

}